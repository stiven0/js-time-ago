"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
const index_1 = require("../time/index");
/**
 * This function allows to calculate the time since an event occurred
 *
 * @param {number|Date} time - Refers to the time we want to calculate in milliseconds
 * @param {locale} local - It refers to a specific type of language, example spanish-es, english-en, Portuguese-pt
 * @returns {Promise} returns a promise with the elapsed time from the event date (time) to the current moment
 */
exports.format = (time, local) => {
    if (typeof time === 'string') {
        return Promise.reject('unsupported time');
    }
    const currentDate = Date.now();
    const difference = currentDate - +time;
    if (time > currentDate) {
        return Promise.reject('Error, date received incorrect');
    }
    else {
        if (difference >= 0 && difference < 60000) {
            // soconds                     
            return Promise.resolve(index_1.seconds(difference / 1000, local));
        }
        else if (difference >= 60000 && difference < 3600000) {
            // minutes
            return Promise.resolve(index_1.minutes(difference / (1000 * 60), local));
        }
        else if (difference >= 3600000 && difference < 86400000) {
            // hours
            return Promise.resolve(index_1.hours(difference / (1000 * 60 * 60), local));
        }
        else if (difference >= 86400000 && difference < 604800000) {
            // days
            return Promise.resolve(index_1.days(difference / (1000 * 60 * 60 * 24), local));
        }
        else if (difference >= 604800000 && difference <= 2419000000) {
            // weeks
            return Promise.resolve(index_1.weeks(difference / (1000 * 60 * 60 * 24 * 7), local));
        }
        else if (difference > 2419000000 && difference <= 28910000000) {
            // months            
            return Promise.resolve(index_1.months(difference / (1000 * 60 * 60 * 24 * 7 * 4), local));
        }
        else {
            // years
            return Promise.resolve(index_1.years((difference / (1000 * 60 * 60 * 24)) / 365, local));
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21ldGhvZHMvZm9ybWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFvRjtBQUdwRjs7Ozs7O0dBTUc7QUFFVSxRQUFBLE1BQU0sR0FBRyxDQUFFLElBQW1CLEVBQUUsS0FBYSxFQUFvQixFQUFFO0lBRTVFLElBQUssT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFHO1FBQ3hCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ2pEO0lBRUQsTUFBTSxXQUFXLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sVUFBVSxHQUFXLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUcvQyxJQUFLLElBQUksR0FBRyxXQUFXLEVBQUc7UUFDbEIsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7S0FFL0Q7U0FBTTtRQUVILElBQUssVUFBVSxJQUFJLENBQUMsSUFBSSxVQUFVLEdBQUcsS0FBSyxFQUFHO1lBQ3pDLCtCQUErQjtZQUMvQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUUsZUFBTyxDQUFFLFVBQVUsR0FBRyxJQUFJLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztTQUVqRTthQUNJLElBQUssVUFBVSxJQUFJLEtBQUssSUFBSSxVQUFVLEdBQUcsT0FBTyxFQUFHO1lBQ3BELFVBQVU7WUFDVixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUUsZUFBTyxDQUFFLFVBQVUsR0FBRyxDQUFFLElBQUksR0FBRyxFQUFFLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1NBRTFFO2FBQ0ksSUFBSyxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsR0FBRyxRQUFRLEVBQUc7WUFDdkQsUUFBUTtZQUNSLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBRSxhQUFLLENBQUUsVUFBVSxHQUFHLENBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1NBRTdFO2FBQ0ksSUFBSyxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsR0FBRyxTQUFTLEVBQUc7WUFDekQsT0FBTztZQUNQLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBRSxZQUFJLENBQUUsVUFBVSxHQUFHLENBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFFLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQTtTQUVoRjthQUNJLElBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxFQUFHO1lBQzVELFFBQVE7WUFDUixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUUsYUFBSyxDQUFFLFVBQVUsR0FBRyxDQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1NBRXRGO2FBQ0ksSUFBSyxVQUFVLEdBQUcsVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEVBQUc7WUFDN0QscUJBQXFCO1lBQ3JCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBRSxjQUFNLENBQUUsVUFBVSxHQUFHLENBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFBO1NBRTFGO2FBQU07WUFDSCxRQUFRO1lBQ1IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFFLGFBQUssQ0FBRSxDQUFDLFVBQVUsR0FBRyxDQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUE7U0FDekY7S0FFSjtBQUdMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCBkYXlzLCB3ZWVrcywgbW9udGhzLCB5ZWFycyB9IGZyb20gJy4uL3RpbWUvaW5kZXgnO1xyXG5pbXBvcnQgeyBsb2NhbGUgfSBmcm9tICcuLi90eXBlcy9sb2NhbGUnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHRvIGNhbGN1bGF0ZSB0aGUgdGltZSBzaW5jZSBhbiBldmVudCBvY2N1cnJlZFxyXG4gKiBcclxuICogQHBhcmFtIHtudW1iZXJ8RGF0ZX0gdGltZSAtIFJlZmVycyB0byB0aGUgdGltZSB3ZSB3YW50IHRvIGNhbGN1bGF0ZSBpbiBtaWxsaXNlY29uZHNcclxuICogQHBhcmFtIHtsb2NhbGV9IGxvY2FsIC0gSXQgcmVmZXJzIHRvIGEgc3BlY2lmaWMgdHlwZSBvZiBsYW5ndWFnZSwgZXhhbXBsZSBzcGFuaXNoLWVzLCBlbmdsaXNoLWVuLCBQb3J0dWd1ZXNlLXB0XHJcbiAqIEByZXR1cm5zIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBlbGFwc2VkIHRpbWUgZnJvbSB0aGUgZXZlbnQgZGF0ZSAodGltZSkgdG8gdGhlIGN1cnJlbnQgbW9tZW50XHJcbiAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvcm1hdCA9ICggdGltZTogbnVtYmVyIHwgRGF0ZSwgbG9jYWw6IGxvY2FsZSApOiBQcm9taXNlPHN0cmluZz4gPT4ge1xyXG5cclxuICAgIGlmICggdHlwZW9mIHRpbWUgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ3Vuc3VwcG9ydGVkIHRpbWUnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjdXJyZW50RGF0ZTogbnVtYmVyID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IGRpZmZlcmVuY2U6IG51bWJlciA9IGN1cnJlbnREYXRlIC0gK3RpbWU7IFxyXG4gICAgXHJcblxyXG4gICAgaWYgKCB0aW1lID4gY3VycmVudERhdGUgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnRXJyb3IsIGRhdGUgcmVjZWl2ZWQgaW5jb3JyZWN0Jyk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIGRpZmZlcmVuY2UgPj0gMCAmJiBkaWZmZXJlbmNlIDwgNjAwMDAgKSB7XHJcbiAgICAgICAgICAgIC8vIHNvY29uZHMgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggc2Vjb25kcyggZGlmZmVyZW5jZSAvIDEwMDAsIGxvY2FsICkgKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCBkaWZmZXJlbmNlID49IDYwMDAwICYmIGRpZmZlcmVuY2UgPCAzNjAwMDAwICkge1xyXG4gICAgICAgICAgICAvLyBtaW51dGVzXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIG1pbnV0ZXMoIGRpZmZlcmVuY2UgLyAoIDEwMDAgKiA2MCApLCBsb2NhbCApICk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggZGlmZmVyZW5jZSA+PSAzNjAwMDAwICYmIGRpZmZlcmVuY2UgPCA4NjQwMDAwMCApIHtcclxuICAgICAgICAgICAgLy8gaG91cnNcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggaG91cnMoIGRpZmZlcmVuY2UgLyAoIDEwMDAgKiA2MCAqIDYwICksIGxvY2FsICkgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCBkaWZmZXJlbmNlID49IDg2NDAwMDAwICYmIGRpZmZlcmVuY2UgPCA2MDQ4MDAwMDAgKSB7XHJcbiAgICAgICAgICAgIC8vIGRheXNcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggZGF5cyggZGlmZmVyZW5jZSAvICggMTAwMCAqIDYwICogNjAgKiAyNCApLCBsb2NhbCApIClcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCBkaWZmZXJlbmNlID49IDYwNDgwMDAwMCAmJiBkaWZmZXJlbmNlIDw9IDI0MTkwMDAwMDAgKSB7XHJcbiAgICAgICAgICAgIC8vIHdlZWtzXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHdlZWtzKCBkaWZmZXJlbmNlIC8gKCAxMDAwICogNjAgKiA2MCAqIDI0ICogNyApLCBsb2NhbCApICk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggZGlmZmVyZW5jZSA+IDI0MTkwMDAwMDAgJiYgZGlmZmVyZW5jZSA8PSAyODkxMDAwMDAwMCApIHtcclxuICAgICAgICAgICAgLy8gbW9udGhzICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIG1vbnRocyggZGlmZmVyZW5jZSAvICggMTAwMCAqIDYwICogNjAgKiAyNCAqIDcgKiA0ICksIGxvY2FsICkgKVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB5ZWFyc1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCB5ZWFycyggKGRpZmZlcmVuY2UgLyAoIDEwMDAgKiA2MCAqIDYwICogMjQgKSkgLyAzNjUsIGxvY2FsICkgKVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG59O1xyXG5cclxuXHJcbiJdfQ==