"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
const index_1 = require("../time/index");
const time_calculations_1 = require("../utils/time-calculations");
/**
 * This function allows you to calculate the time since an event occurred or will occur (valid for past and future dates)
 *
 * @param {number|Date} time - Refers to the time we want to calculate in milliseconds
 * @param {locale} local - It refers to a specific type of language, example spanish-es, english-en, portuguese-pt
 * @param {style} [style] - (Optional) Refers to the output format of text can be 'round' or 'mini', by default it is 'round'
 * @returns {Promise} returns a promise with the elapsed time or that will elapse from the event date (time) to the current moment
 */
const format = (time, local, style = 'round') => {
    return new Promise((resolve, reject) => {
        if (typeof time === 'string' || typeof time === 'boolean')
            reject('unsupported time');
        const currentDate = Date.now();
        const difference = currentDate - +time;
        let isPastOrFuture;
        isPastOrFuture = time > currentDate ? 'future' : 'past';
        if ((isPastOrFuture === 'future' && difference > -60000) || (difference >= 0 && difference < 60000)) {
            resolve((0, index_1.seconds)((0, time_calculations_1.calculateSeconds)(difference), local, isPastOrFuture, style));
        }
        else if ((difference <= -60000 && difference > -3600000) || (difference >= 60000 && difference < 3600000)) {
            resolve((0, index_1.minutes)((0, time_calculations_1.calculateMinutes)(difference), local, isPastOrFuture, style));
        }
        else if ((difference <= -3600000 && difference > -86400000) || (difference >= 3600000 && difference < 86400000)) {
            resolve((0, index_1.hours)((0, time_calculations_1.calculateHours)(difference), local, isPastOrFuture, style));
        }
        else if ((difference <= -86400000 && difference > -604800000) || (difference >= 86400000 && difference < 604800000)) {
            resolve((0, index_1.days)((0, time_calculations_1.calculateDays)(difference), local, isPastOrFuture, style));
        }
        else if ((difference <= -604800000 && difference >= -2419000000) || (difference >= 604800000 && difference <= 2419000000)) {
            resolve((0, index_1.weeks)((0, time_calculations_1.calculateWeeks)(difference), local, isPastOrFuture, style));
        }
        else if ((difference < -2419000000 && difference >= -28910000000) || (difference > 2419000000 && difference <= 28910000000)) {
            resolve((0, index_1.months)((0, time_calculations_1.calculateMonths)(difference), local, isPastOrFuture, style));
        }
        else {
            resolve((0, index_1.years)((0, time_calculations_1.calculateYears)(difference), local, isPastOrFuture, style));
        }
    });
};
exports.format = format;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21ldGhvZHMvZm9ybWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFvRjtBQUNwRixrRUFBZ0s7QUFLaEs7Ozs7Ozs7R0FPRztBQUVJLE1BQU0sTUFBTSxHQUFHLENBQUUsSUFBbUIsRUFBRSxLQUFhLEVBQUUsUUFBZSxPQUFPLEVBQW9CLEVBQUU7SUFFcEcsT0FBTyxJQUFJLE9BQU8sQ0FBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUVwQyxJQUFLLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksS0FBSyxTQUFTO1lBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFeEYsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQy9CLE1BQU0sVUFBVSxHQUFJLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUN4QyxJQUFJLGNBQThCLENBQUM7UUFDbkMsY0FBYyxHQUFHLElBQUksR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRXhELElBQUssQ0FBQyxjQUFjLEtBQUssUUFBUSxJQUFJLFVBQVUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLEVBQUc7WUFDbkcsT0FBTyxDQUFFLElBQUEsZUFBTyxFQUFFLElBQUEsb0NBQWdCLEVBQUUsVUFBVSxDQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1NBRXRGO2FBQU0sSUFBSyxDQUFDLFVBQVUsSUFBSSxDQUFDLEtBQUssSUFBSSxVQUFVLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxLQUFLLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxFQUFHO1lBQzNHLE9BQU8sQ0FBRSxJQUFBLGVBQU8sRUFBRSxJQUFBLG9DQUFnQixFQUFFLFVBQVUsQ0FBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztTQUV0RjthQUFNLElBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLElBQUksVUFBVSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBRSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUUsRUFBRztZQUNuSCxPQUFPLENBQUUsSUFBQSxhQUFLLEVBQUUsSUFBQSxrQ0FBYyxFQUFFLFVBQVUsQ0FBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztTQUVsRjthQUFNLElBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLElBQUksVUFBVSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsRUFBRztZQUNySCxPQUFPLENBQUUsSUFBQSxZQUFJLEVBQUUsSUFBQSxpQ0FBYSxFQUFFLFVBQVUsQ0FBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztTQUVoRjthQUFNLElBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxTQUFTLElBQUksVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsRUFBRztZQUMzSCxPQUFPLENBQUUsSUFBQSxhQUFLLEVBQUUsSUFBQSxrQ0FBYyxFQUFFLFVBQVUsQ0FBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztTQUVsRjthQUFNLElBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxVQUFVLElBQUksVUFBVSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLENBQUMsRUFBRztZQUM3SCxPQUFPLENBQUUsSUFBQSxjQUFNLEVBQUUsSUFBQSxtQ0FBZSxFQUFFLFVBQVUsQ0FBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztTQUVwRjthQUFNO1lBQ0gsT0FBTyxDQUFFLElBQUEsYUFBSyxFQUFFLElBQUEsa0NBQWMsRUFBRSxVQUFVLENBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7U0FFbEY7SUFFTCxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQztBQXBDVyxRQUFBLE1BQU0sVUFvQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2Vjb25kcywgbWludXRlcywgaG91cnMsIGRheXMsIHdlZWtzLCBtb250aHMsIHllYXJzIH0gZnJvbSAnLi4vdGltZS9pbmRleCc7XHJcbmltcG9ydCB7IGNhbGN1bGF0ZU1pbnV0ZXMsIGNhbGN1bGF0ZVNlY29uZHMsIGNhbGN1bGF0ZUhvdXJzLCBjYWxjdWxhdGVEYXlzLCBjYWxjdWxhdGVXZWVrcywgY2FsY3VsYXRlTW9udGhzLCBjYWxjdWxhdGVZZWFycyB9IGZyb20gJy4uL3V0aWxzL3RpbWUtY2FsY3VsYXRpb25zJztcclxuaW1wb3J0IHsgaXNQYXN0T3JGdXR1cmUgfSBmcm9tICcuLi90eXBlcy9pcy1wYXN0LW9yLWZ1dHVyZSc7XHJcbmltcG9ydCB7IGxvY2FsZSB9IGZyb20gJy4uL3R5cGVzL2xvY2FsZSc7XHJcbmltcG9ydCB7IHN0eWxlIH0gZnJvbSAnLi4vdHlwZXMvc3R5bGUnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBjYWxjdWxhdGUgdGhlIHRpbWUgc2luY2UgYW4gZXZlbnQgb2NjdXJyZWQgb3Igd2lsbCBvY2N1ciAodmFsaWQgZm9yIHBhc3QgYW5kIGZ1dHVyZSBkYXRlcylcclxuICogXHJcbiAqIEBwYXJhbSB7bnVtYmVyfERhdGV9IHRpbWUgLSBSZWZlcnMgdG8gdGhlIHRpbWUgd2Ugd2FudCB0byBjYWxjdWxhdGUgaW4gbWlsbGlzZWNvbmRzXHJcbiAqIEBwYXJhbSB7bG9jYWxlfSBsb2NhbCAtIEl0IHJlZmVycyB0byBhIHNwZWNpZmljIHR5cGUgb2YgbGFuZ3VhZ2UsIGV4YW1wbGUgc3BhbmlzaC1lcywgZW5nbGlzaC1lbiwgcG9ydHVndWVzZS1wdFxyXG4gKiBAcGFyYW0ge3N0eWxlfSBbc3R5bGVdIC0gKE9wdGlvbmFsKSBSZWZlcnMgdG8gdGhlIG91dHB1dCBmb3JtYXQgb2YgdGV4dCBjYW4gYmUgJ3JvdW5kJyBvciAnbWluaScsIGJ5IGRlZmF1bHQgaXQgaXMgJ3JvdW5kJ1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgZWxhcHNlZCB0aW1lIG9yIHRoYXQgd2lsbCBlbGFwc2UgZnJvbSB0aGUgZXZlbnQgZGF0ZSAodGltZSkgdG8gdGhlIGN1cnJlbnQgbW9tZW50XHJcbiAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvcm1hdCA9ICggdGltZTogbnVtYmVyIHwgRGF0ZSwgbG9jYWw6IGxvY2FsZSwgc3R5bGU6IHN0eWxlID0gJ3JvdW5kJyApOiBQcm9taXNlPHN0cmluZz4gPT4ge1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICBpZiAoIHR5cGVvZiB0aW1lID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGltZSA9PT0gJ2Jvb2xlYW4nICkgcmVqZWN0KCd1bnN1cHBvcnRlZCB0aW1lJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCBkaWZmZXJlbmNlICA9IGN1cnJlbnREYXRlIC0gK3RpbWU7XHJcbiAgICAgICAgbGV0IGlzUGFzdE9yRnV0dXJlOiBpc1Bhc3RPckZ1dHVyZTtcclxuICAgICAgICBpc1Bhc3RPckZ1dHVyZSA9IHRpbWUgPiBjdXJyZW50RGF0ZSA/ICdmdXR1cmUnIDogJ3Bhc3QnO1xyXG5cclxuICAgICAgICBpZiAoIChpc1Bhc3RPckZ1dHVyZSA9PT0gJ2Z1dHVyZScgJiYgZGlmZmVyZW5jZSA+IC02MDAwMCkgfHwgKGRpZmZlcmVuY2UgPj0gMCAmJiBkaWZmZXJlbmNlIDwgNjAwMDApICkge1xyXG4gICAgICAgICAgICByZXNvbHZlKCBzZWNvbmRzKCBjYWxjdWxhdGVTZWNvbmRzKCBkaWZmZXJlbmNlICksIGxvY2FsLCBpc1Bhc3RPckZ1dHVyZSwgc3R5bGUgKSApO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKCAoZGlmZmVyZW5jZSA8PSAtNjAwMDAgJiYgZGlmZmVyZW5jZSA+IC0zNjAwMDAwKSB8fCAoZGlmZmVyZW5jZSA+PSA2MDAwMCAmJiBkaWZmZXJlbmNlIDwgMzYwMDAwMCkgKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoIG1pbnV0ZXMoIGNhbGN1bGF0ZU1pbnV0ZXMoIGRpZmZlcmVuY2UgKSwgbG9jYWwsIGlzUGFzdE9yRnV0dXJlLCBzdHlsZSApICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoIChkaWZmZXJlbmNlIDw9IC0zNjAwMDAwICYmIGRpZmZlcmVuY2UgPiAtODY0MDAwMDApIHx8ICggZGlmZmVyZW5jZSA+PSAzNjAwMDAwICYmIGRpZmZlcmVuY2UgPCA4NjQwMDAwMCApICkge1xyXG4gICAgICAgICAgICByZXNvbHZlKCBob3VycyggY2FsY3VsYXRlSG91cnMoIGRpZmZlcmVuY2UgKSwgbG9jYWwsIGlzUGFzdE9yRnV0dXJlLCBzdHlsZSApICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoIChkaWZmZXJlbmNlIDw9IC04NjQwMDAwMCAmJiBkaWZmZXJlbmNlID4gLTYwNDgwMDAwMCkgfHwgKGRpZmZlcmVuY2UgPj0gODY0MDAwMDAgJiYgZGlmZmVyZW5jZSA8IDYwNDgwMDAwMCkgKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoIGRheXMoIGNhbGN1bGF0ZURheXMoIGRpZmZlcmVuY2UgKSwgbG9jYWwsIGlzUGFzdE9yRnV0dXJlLCBzdHlsZSApICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoIChkaWZmZXJlbmNlIDw9IC02MDQ4MDAwMDAgJiYgZGlmZmVyZW5jZSA+PSAtMjQxOTAwMDAwMCkgfHwgKGRpZmZlcmVuY2UgPj0gNjA0ODAwMDAwICYmIGRpZmZlcmVuY2UgPD0gMjQxOTAwMDAwMCkgKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoIHdlZWtzKCBjYWxjdWxhdGVXZWVrcyggZGlmZmVyZW5jZSApLCBsb2NhbCwgaXNQYXN0T3JGdXR1cmUsIHN0eWxlICkgKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICggKGRpZmZlcmVuY2UgPCAtMjQxOTAwMDAwMCAmJiBkaWZmZXJlbmNlID49IC0yODkxMDAwMDAwMCkgfHwgKGRpZmZlcmVuY2UgPiAyNDE5MDAwMDAwICYmIGRpZmZlcmVuY2UgPD0gMjg5MTAwMDAwMDApICkge1xyXG4gICAgICAgICAgICByZXNvbHZlKCBtb250aHMoIGNhbGN1bGF0ZU1vbnRocyggZGlmZmVyZW5jZSApLCBsb2NhbCwgaXNQYXN0T3JGdXR1cmUsIHN0eWxlICkgKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSggeWVhcnMoIGNhbGN1bGF0ZVllYXJzKCBkaWZmZXJlbmNlICksIGxvY2FsLCBpc1Bhc3RPckZ1dHVyZSwgc3R5bGUgKSApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG59OyJdfQ==