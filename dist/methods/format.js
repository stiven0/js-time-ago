"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
const index_1 = require("../time/index");
/**
 * This function allows to calculate the time since an event occurred
 *
 * @param {number|Date} time - Refers to the time we want to calculate
 * @param {locale} local - It refers to a specific type of language, example spanish-es, english-en
 * @returns {Promise} returns a promise with the elapsed time from the event date (time) to the current moment
 */
exports.format = (time, local) => {
    if (typeof time === 'string') {
        return Promise.reject('unsupported time');
    }
    const currentDate = Date.now();
    const difference = currentDate - +time;
    if (time > currentDate) {
        return Promise.reject('Error, date received incorrect');
    }
    else {
        if (difference >= 0 && difference < 60000) {
            // soconds                     
            return Promise.resolve(index_1.seconds(difference / 1000, local));
        }
        else if (difference >= 60000 && difference < 3600000) {
            // minutes
            return Promise.resolve(index_1.minutes(difference / (1000 * 60), local));
        }
        else if (difference >= 3600000 && difference < 86400000) {
            // hours
            return Promise.resolve(index_1.hours(difference / (1000 * 60 * 60), local));
        }
        else if (difference >= 86400000 && difference < 604800000) {
            // days
            return Promise.resolve(index_1.days(difference / (1000 * 60 * 60 * 24), local));
        }
        else if (difference >= 604800000 && difference <= 2419000000) {
            // weeks
            return Promise.resolve(index_1.weeks(difference / (1000 * 60 * 60 * 24 * 7), local));
        }
        else if (difference > 2419000000 && difference <= 28910000000) {
            // months            
            return Promise.resolve(index_1.months(difference / (1000 * 60 * 60 * 24 * 7 * 4), local));
        }
        else {
            // years
            return Promise.resolve(index_1.years((difference / (1000 * 60 * 60 * 24)) / 365, local));
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21ldGhvZHMvZm9ybWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFvRjtBQUdwRjs7Ozs7O0dBTUc7QUFFVSxRQUFBLE1BQU0sR0FBRyxDQUFFLElBQW1CLEVBQUUsS0FBYSxFQUFvQixFQUFFO0lBRTVFLElBQUssT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFHO1FBQ3hCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ2pEO0lBRUQsTUFBTSxXQUFXLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sVUFBVSxHQUFXLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUcvQyxJQUFLLElBQUksR0FBRyxXQUFXLEVBQUc7UUFDbEIsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7S0FFL0Q7U0FBTTtRQUVILElBQUssVUFBVSxJQUFJLENBQUMsSUFBSSxVQUFVLEdBQUcsS0FBSyxFQUFHO1lBQ3pDLCtCQUErQjtZQUMvQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUUsZUFBTyxDQUFFLFVBQVUsR0FBRyxJQUFJLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztTQUVqRTthQUNJLElBQUssVUFBVSxJQUFJLEtBQUssSUFBSSxVQUFVLEdBQUcsT0FBTyxFQUFHO1lBQ3BELFVBQVU7WUFDVixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUUsZUFBTyxDQUFFLFVBQVUsR0FBRyxDQUFFLElBQUksR0FBRyxFQUFFLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1NBRTFFO2FBQ0ksSUFBSyxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsR0FBRyxRQUFRLEVBQUc7WUFDdkQsUUFBUTtZQUNSLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBRSxhQUFLLENBQUUsVUFBVSxHQUFHLENBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1NBRTdFO2FBQ0ksSUFBSyxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsR0FBRyxTQUFTLEVBQUc7WUFDekQsT0FBTztZQUNQLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBRSxZQUFJLENBQUUsVUFBVSxHQUFHLENBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFFLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQTtTQUVoRjthQUNJLElBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxFQUFHO1lBQzVELFFBQVE7WUFDUixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUUsYUFBSyxDQUFFLFVBQVUsR0FBRyxDQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1NBRXRGO2FBQ0ksSUFBSyxVQUFVLEdBQUcsVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEVBQUc7WUFDN0QscUJBQXFCO1lBQ3JCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBRSxjQUFNLENBQUUsVUFBVSxHQUFHLENBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFBO1NBRTFGO2FBQU07WUFDSCxRQUFRO1lBQ1IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFFLGFBQUssQ0FBRSxDQUFDLFVBQVUsR0FBRyxDQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUE7U0FDekY7S0FFSjtBQUdMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCBkYXlzLCB3ZWVrcywgbW9udGhzLCB5ZWFycyB9IGZyb20gJy4uL3RpbWUvaW5kZXgnO1xyXG5pbXBvcnQgeyBsb2NhbGUgfSBmcm9tICcuLi90eXBlcy9sb2NhbGUnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHRvIGNhbGN1bGF0ZSB0aGUgdGltZSBzaW5jZSBhbiBldmVudCBvY2N1cnJlZFxyXG4gKiBcclxuICogQHBhcmFtIHtudW1iZXJ8RGF0ZX0gdGltZSAtIFJlZmVycyB0byB0aGUgdGltZSB3ZSB3YW50IHRvIGNhbGN1bGF0ZVxyXG4gKiBAcGFyYW0ge2xvY2FsZX0gbG9jYWwgLSBJdCByZWZlcnMgdG8gYSBzcGVjaWZpYyB0eXBlIG9mIGxhbmd1YWdlLCBleGFtcGxlIHNwYW5pc2gtZXMsIGVuZ2xpc2gtZW5cclxuICogQHJldHVybnMge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGVsYXBzZWQgdGltZSBmcm9tIHRoZSBldmVudCBkYXRlICh0aW1lKSB0byB0aGUgY3VycmVudCBtb21lbnRcclxuICovXHJcblxyXG5leHBvcnQgY29uc3QgZm9ybWF0ID0gKCB0aW1lOiBudW1iZXIgfCBEYXRlLCBsb2NhbDogbG9jYWxlICk6IFByb21pc2U8c3RyaW5nPiA9PiB7XHJcblxyXG4gICAgaWYgKCB0eXBlb2YgdGltZSA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgndW5zdXBwb3J0ZWQgdGltZScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGN1cnJlbnREYXRlOiBudW1iZXIgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QgZGlmZmVyZW5jZTogbnVtYmVyID0gY3VycmVudERhdGUgLSArdGltZTsgXHJcbiAgICBcclxuXHJcbiAgICBpZiAoIHRpbWUgPiBjdXJyZW50RGF0ZSApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdFcnJvciwgZGF0ZSByZWNlaXZlZCBpbmNvcnJlY3QnKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICggZGlmZmVyZW5jZSA+PSAwICYmIGRpZmZlcmVuY2UgPCA2MDAwMCApIHtcclxuICAgICAgICAgICAgLy8gc29jb25kcyAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBzZWNvbmRzKCBkaWZmZXJlbmNlIC8gMTAwMCwgbG9jYWwgKSApO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIGRpZmZlcmVuY2UgPj0gNjAwMDAgJiYgZGlmZmVyZW5jZSA8IDM2MDAwMDAgKSB7XHJcbiAgICAgICAgICAgIC8vIG1pbnV0ZXNcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggbWludXRlcyggZGlmZmVyZW5jZSAvICggMTAwMCAqIDYwICksIGxvY2FsICkgKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCBkaWZmZXJlbmNlID49IDM2MDAwMDAgJiYgZGlmZmVyZW5jZSA8IDg2NDAwMDAwICkge1xyXG4gICAgICAgICAgICAvLyBob3Vyc1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBob3VycyggZGlmZmVyZW5jZSAvICggMTAwMCAqIDYwICogNjAgKSwgbG9jYWwgKSApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIGRpZmZlcmVuY2UgPj0gODY0MDAwMDAgJiYgZGlmZmVyZW5jZSA8IDYwNDgwMDAwMCApIHtcclxuICAgICAgICAgICAgLy8gZGF5c1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBkYXlzKCBkaWZmZXJlbmNlIC8gKCAxMDAwICogNjAgKiA2MCAqIDI0ICksIGxvY2FsICkgKVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIGRpZmZlcmVuY2UgPj0gNjA0ODAwMDAwICYmIGRpZmZlcmVuY2UgPD0gMjQxOTAwMDAwMCApIHtcclxuICAgICAgICAgICAgLy8gd2Vla3NcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggd2Vla3MoIGRpZmZlcmVuY2UgLyAoIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3ICksIGxvY2FsICkgKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCBkaWZmZXJlbmNlID4gMjQxOTAwMDAwMCAmJiBkaWZmZXJlbmNlIDw9IDI4OTEwMDAwMDAwICkge1xyXG4gICAgICAgICAgICAvLyBtb250aHMgICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggbW9udGhzKCBkaWZmZXJlbmNlIC8gKCAxMDAwICogNjAgKiA2MCAqIDI0ICogNyAqIDQgKSwgbG9jYWwgKSApXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHllYXJzXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHllYXJzKCAoZGlmZmVyZW5jZSAvICggMTAwMCAqIDYwICogNjAgKiAyNCApKSAvIDM2NSwgbG9jYWwgKSApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuXHJcbn07XHJcblxyXG5cclxuIl19