"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.months = void 0;
const index_1 = require("../locale/index");
exports.months = (month, local) => {
    const monthsSplit = String(month).split('.');
    if (+monthsSplit[0] === 1) {
        switch (local) {
            case 'es':
                return index_1.monthsEs(1);
            case 'en':
                return index_1.monthsEn(1);
            case 'pt':
                return index_1.monthsPt(1);
            default: return index_1.monthsEn(1);
        }
    }
    else {
        switch (local) {
            case 'es':
                return index_1.monthsEs(+monthsSplit[0]);
            case 'en':
                return index_1.monthsEn(+monthsSplit[0]);
            case 'pt':
                return index_1.monthsPt(+monthsSplit[0]);
            default: return index_1.monthsEn(+monthsSplit[0]);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RpbWUvbW9udGhzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUErRDtBQUdsRCxRQUFBLE1BQU0sR0FBRyxDQUFFLEtBQWEsRUFBRSxLQUFhLEVBQVcsRUFBRTtJQUU3RCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUUsS0FBSyxDQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRS9DLElBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFHO1FBRXpCLFFBQVMsS0FBSyxFQUFHO1lBRVQsS0FBSyxJQUFJO2dCQUNMLE9BQU8sZ0JBQVEsQ0FBRSxDQUFDLENBQUUsQ0FBQztZQUV6QixLQUFLLElBQUk7Z0JBQ0wsT0FBTyxnQkFBUSxDQUFFLENBQUMsQ0FBRSxDQUFDO1lBRXpCLEtBQUssSUFBSTtnQkFDTCxPQUFPLGdCQUFRLENBQUUsQ0FBQyxDQUFFLENBQUM7WUFFekIsT0FBTyxDQUFDLENBQUMsT0FBTyxnQkFBUSxDQUFFLENBQUMsQ0FBRSxDQUFDO1NBRXJDO0tBRUo7U0FBTTtRQUVILFFBQVMsS0FBSyxFQUFHO1lBRVQsS0FBSyxJQUFJO2dCQUNMLE9BQU8sZ0JBQVEsQ0FBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFDO1lBRXZDLEtBQUssSUFBSTtnQkFDTCxPQUFPLGdCQUFRLENBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztZQUV2QyxLQUFLLElBQUk7Z0JBQ0wsT0FBTyxnQkFBUSxDQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUM7WUFFdkMsT0FBTyxDQUFDLENBQUMsT0FBTyxnQkFBUSxDQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUM7U0FFbkQ7S0FFSjtBQUVMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vbnRoc0VzLCBtb250aHNFbiwgbW9udGhzUHQgfSBmcm9tICcuLi9sb2NhbGUvaW5kZXgnO1xyXG5pbXBvcnQgeyBsb2NhbGUgfSBmcm9tICcuLi90eXBlcy9sb2NhbGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1vbnRocyA9ICggbW9udGg6IG51bWJlciwgbG9jYWw6IGxvY2FsZSApOiBzdHJpbmcgPT4ge1xyXG5cclxuICAgIGNvbnN0IG1vbnRoc1NwbGl0ID0gU3RyaW5nKCBtb250aCApLnNwbGl0KCcuJyk7XHJcblxyXG4gICAgaWYgKCArbW9udGhzU3BsaXRbMF0gPT09IDEgKSB7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoIGxvY2FsICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2VzJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzRXMoIDEgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdlbic6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc0VuKCAxICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAncHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNQdCggMSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBtb250aHNFbiggMSApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgc3dpdGNoICggbG9jYWwgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZXMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNFcyggK21vbnRoc1NwbGl0WzBdICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZW4nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNFbiggK21vbnRoc1NwbGl0WzBdICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAncHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNQdCggK21vbnRoc1NwbGl0WzBdICk7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIG1vbnRoc0VuKCArbW9udGhzU3BsaXRbMF0gKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn07Il19